const express = require('express');
const multer = require('multer');
const { MongoClient, ObjectId } = require('mongodb');
const { GridFSBucket } = require('mongodb');
require('dotenv').config();

const mongoURI = process.env.mongoURL;
const dbName = "realPyq";

const client = new MongoClient(mongoURI);

async function connectToDatabase() {
    try {
        await client.connect();
        console.log("Connected to MongoDB");
        return client.db(dbName);
    } catch (error) {
        console.error("Error connecting to MongoDB:", error);
        process.exit(1);
    }
}

const SearchRouter = express.Router();

const storage = multer.memoryStorage();
const upload = multer({ storage: storage });

let gridFSBucket;

async function initializeGridFSBucket() {
    const db = await connectToDatabase();
    gridFSBucket = new GridFSBucket(db);
}

initializeGridFSBucket();


const db = client.db(dbName);
    const collection = db.collection('test.files');    
    const collectionChunks = db.collection('test.chunks');
collection.find({filename: fileName}).toArray(function(err, docs){        
    if(err){        
      return res.render('index', {
       title: 'File error', 
       message: 'Error finding file', 
        error: err.errMsg});      
    }
  if(!docs || docs.length === 0){        
    return res.render('index', {
     title: 'Download Error', 
     message: 'No file found'});      
   }else{
  
   //Retrieving the chunks from the db          
   collectionChunks.find({files_id : docs[0]._id})
     .sort({n: 1}).toArray(function(err, chunks){          
       if(err){            
          return res.render('index', {
           title: 'Download Error', 
           message: 'Error retrieving chunks', 
           error: err.errmsg});          
        }
      if(!chunks || chunks.length === 0){            
        //No data found            
        return res.render('index', {
           title: 'Download Error', 
           message: 'No data found'});          
      }
    
    let fileData = [];          
    for(let i=0; i<chunks.length;i++){            
      //This is in Binary JSON or BSON format, which is stored               
      //in fileData array in base64 endocoded string format               
     
      fileData.push(chunks[i].data.toString('base64'));          
    }
    
     //Display the chunks using the data URI format          
     let finalFile = 'data:' + docs[0].contentType + ';base64,' 
          + fileData.join('');          
      res.render('imageView', {
         title: 'Image File', 
         message: 'Image loaded from MongoDB GridFS', 
         imgurl: finalFile});
     });      
    }          
   });  
 });
};

module.exports = {
    SearchRouter
};








const express = require('express');
const multer = require('multer');
const { MongoClient, ObjectId } = require('mongodb');
const { GridFSBucket } = require('mongodb');
require('dotenv').config();

const mongoURI = process.env.mongoURL;
const dbName = "realPyq";

const client = new MongoClient(mongoURI);

async function connectToDatabase() {
    try {
        await client.connect();
        console.log("Connected to MongoDB");
        return client.db(dbName);
    } catch (error) {
        console.error("Error connecting to MongoDB:", error);
        throw error; // Throw error to handle it in the calling function
    }
}

const SearchRouter = express.Router();

const storage = multer.memoryStorage();
const upload = multer({ storage: storage });

let gridFSBucket;

async function initializeGridFSBucket() {
    const db = await connectToDatabase();
    gridFSBucket = new GridFSBucket(db);
}

initializeGridFSBucket();

SearchRouter.post("/search-files", async (req, res) => {
    try {
        const fileName = req.body.fname;
        if (!fileName) {
            return res.status(400).send('Filename is required.');
        }
        const collection = client.db(dbName).collection('fs.files');
        const collectionChunks = client.db(dbName).collection('fs.chunks');

        collection.find({ filename: fileName }).then(async function (err, docs) {
            console.log("222dd")
            if (err) {
                console.error('Error finding file:', err);
                return res.status(500).send('Error finding file');
            }

            if (!docs || docs.length === 0) {
                return res.status(404).send('No file found');
            }

            collectionChunks.find({ files_id: docs[0]._id }).sort({ n: 1 }).then(async function (err, chunks) {
                if (err) {
                    console.error('Error retrieving chunks:', err);
                    return res.status(500).send('Error retrieving chunks');
                }

                if (!chunks || chunks.length === 0) {
                    return res.status(404).send('No data found');
                }

                let fileData = [];
                for (let i = 0; i < chunks.length; i++) {
                    fileData.push(chunks[i].data.buffer);
                }

                const pdfData = Buffer.concat(fileData);
                res.contentType('application/pdf').send(pdfData);
            });
        });
    } catch (error) {
        console.error('Error searching or sending files in MongoDB:', error);
        res.status(500).send('Error searching or sending files in MongoDB.');
    }
});

module.exports = {
    SearchRouter
};
